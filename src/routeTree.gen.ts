/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ReportsIndexImport } from './routes/reports/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as FoldersIndexImport } from './routes/folders/index'
import { Route as DeploymentIndexImport } from './routes/deployment/index'
import { Route as DataImportsIndexImport } from './routes/data-imports/index'
import { Route as DataExportsIndexImport } from './routes/data-exports/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as ChartsIndexImport } from './routes/charts/index'
import { Route as PostsNewImport } from './routes/posts/new'
import { Route as PostsPostIdImport } from './routes/posts/$postId'

// Create/Update Routes

const ReportsIndexRoute = ReportsIndexImport.update({
  path: '/reports/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const FoldersIndexRoute = FoldersIndexImport.update({
  path: '/folders/',
  getParentRoute: () => rootRoute,
} as any)

const DeploymentIndexRoute = DeploymentIndexImport.update({
  path: '/deployment/',
  getParentRoute: () => rootRoute,
} as any)

const DataImportsIndexRoute = DataImportsIndexImport.update({
  path: '/data-imports/',
  getParentRoute: () => rootRoute,
} as any)

const DataExportsIndexRoute = DataExportsIndexImport.update({
  path: '/data-exports/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)

const ChartsIndexRoute = ChartsIndexImport.update({
  path: '/charts/',
  getParentRoute: () => rootRoute,
} as any)

const PostsNewRoute = PostsNewImport.update({
  path: '/posts/new',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/new': {
      id: '/posts/new'
      path: '/posts/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof PostsNewImport
      parentRoute: typeof rootRoute
    }
    '/charts/': {
      id: '/charts/'
      path: '/charts'
      fullPath: '/charts'
      preLoaderRoute: typeof ChartsIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/data-exports/': {
      id: '/data-exports/'
      path: '/data-exports'
      fullPath: '/data-exports'
      preLoaderRoute: typeof DataExportsIndexImport
      parentRoute: typeof rootRoute
    }
    '/data-imports/': {
      id: '/data-imports/'
      path: '/data-imports'
      fullPath: '/data-imports'
      preLoaderRoute: typeof DataImportsIndexImport
      parentRoute: typeof rootRoute
    }
    '/deployment/': {
      id: '/deployment/'
      path: '/deployment'
      fullPath: '/deployment'
      preLoaderRoute: typeof DeploymentIndexImport
      parentRoute: typeof rootRoute
    }
    '/folders/': {
      id: '/folders/'
      path: '/folders'
      fullPath: '/folders'
      preLoaderRoute: typeof FoldersIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/reports/': {
      id: '/reports/'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  PostsPostIdRoute,
  PostsNewRoute,
  ChartsIndexRoute,
  DashboardIndexRoute,
  DataExportsIndexRoute,
  DataImportsIndexRoute,
  DeploymentIndexRoute,
  FoldersIndexRoute,
  PostsIndexRoute,
  ReportsIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/posts/$postId",
        "/posts/new",
        "/charts/",
        "/dashboard/",
        "/data-exports/",
        "/data-imports/",
        "/deployment/",
        "/folders/",
        "/posts/",
        "/reports/"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx"
    },
    "/posts/new": {
      "filePath": "posts/new.tsx"
    },
    "/charts/": {
      "filePath": "charts/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/data-exports/": {
      "filePath": "data-exports/index.tsx"
    },
    "/data-imports/": {
      "filePath": "data-imports/index.tsx"
    },
    "/deployment/": {
      "filePath": "deployment/index.tsx"
    },
    "/folders/": {
      "filePath": "folders/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/reports/": {
      "filePath": "reports/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
